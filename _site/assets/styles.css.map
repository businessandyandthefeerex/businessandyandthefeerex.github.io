{"version":3,"sourceRoot":"","sources":["../_sass/_normalize.scss","../_sass/sassline-base/_reset.scss","../_sass/sassline-base/_typography.scss","../_sass/sassline-base/_mixins.scss","../_sass/_settings.scss","../_sass/_syntax.scss","../_sass/_theme.scss","../_sass/_flex.scss","styles.scss"],"names":[],"mappings":"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","sourcesContent":["/*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */\r\n\r\n/**\r\n * 1. Change the default font family in all browsers (opinionated).\r\n * 2. Prevent adjustments of font size after orientation changes in IE and iOS.\r\n */\r\n\r\nhtml {\r\n  font-family: sans-serif; /* 1 */\r\n  -ms-text-size-adjust: 100%; /* 2 */\r\n  -webkit-text-size-adjust: 100%; /* 2 */\r\n}\r\n\r\n/**\r\n * Remove the margin in all browsers (opinionated).\r\n */\r\n\r\nbody {\r\n  margin: 0;\r\n}\r\n\r\n/* HTML5 display definitions\r\n   ========================================================================== */\r\n\r\n/**\r\n * Add the correct display in IE 9-.\r\n * 1. Add the correct display in Edge, IE, and Firefox.\r\n * 2. Add the correct display in IE.\r\n */\r\n\r\narticle,\r\naside,\r\ndetails, /* 1 */\r\nfigcaption,\r\nfigure,\r\nfooter,\r\nheader,\r\nmain, /* 2 */\r\nmenu,\r\nnav,\r\nsection,\r\nsummary { /* 1 */\r\n  display: block;\r\n}\r\n\r\n/**\r\n * Add the correct display in IE 9-.\r\n */\r\n\r\naudio,\r\ncanvas,\r\nprogress,\r\nvideo {\r\n  display: inline-block;\r\n}\r\n\r\n/**\r\n * Add the correct display in iOS 4-7.\r\n */\r\n\r\naudio:not([controls]) {\r\n  display: none;\r\n  height: 0;\r\n}\r\n\r\n/**\r\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\r\n */\r\n\r\nprogress {\r\n  vertical-align: baseline;\r\n}\r\n\r\n/**\r\n * Add the correct display in IE 10-.\r\n * 1. Add the correct display in IE.\r\n */\r\n\r\ntemplate, /* 1 */\r\n[hidden] {\r\n  display: none;\r\n}\r\n\r\n/* Links\r\n   ========================================================================== */\r\n\r\n/**\r\n * 1. Remove the gray background on active links in IE 10.\r\n * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.\r\n */\r\n\r\na {\r\n  background-color: transparent; /* 1 */\r\n  -webkit-text-decoration-skip: objects; /* 2 */\r\n}\r\n\r\n/**\r\n * Remove the outline on focused links when they are also active or hovered\r\n * in all browsers (opinionated).\r\n */\r\n\r\na:active,\r\na:hover {\r\n  outline-width: 0;\r\n}\r\n\r\n/* Text-level semantics\r\n   ========================================================================== */\r\n\r\n/**\r\n * 1. Remove the bottom border in Firefox 39-.\r\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\r\n */\r\n\r\nabbr[title] {\r\n  border-bottom: none; /* 1 */\r\n  text-decoration: underline; /* 2 */\r\n  text-decoration: underline dotted; /* 2 */\r\n}\r\n\r\n/**\r\n * Prevent the duplicate application of `bolder` by the next rule in Safari 6.\r\n */\r\n\r\nb,\r\nstrong {\r\n  font-weight: inherit;\r\n}\r\n\r\n/**\r\n * Add the correct font weight in Chrome, Edge, and Safari.\r\n */\r\n\r\nb,\r\nstrong {\r\n  font-weight: bolder;\r\n}\r\n\r\n/**\r\n * Add the correct font style in Android 4.3-.\r\n */\r\n\r\ndfn {\r\n  font-style: italic;\r\n}\r\n\r\n/**\r\n * Correct the font size and margin on `h1` elements within `section` and\r\n * `article` contexts in Chrome, Firefox, and Safari.\r\n */\r\n\r\nh1 {\r\n  font-size: 2em;\r\n  margin: 0.67em 0;\r\n}\r\n\r\n/**\r\n * Add the correct background and color in IE 9-.\r\n */\r\n\r\nmark {\r\n  background-color: #ff0;\r\n  color: #000;\r\n}\r\n\r\n/**\r\n * Add the correct font size in all browsers.\r\n */\r\n\r\nsmall {\r\n  font-size: 80%;\r\n}\r\n\r\n/**\r\n * Prevent `sub` and `sup` elements from affecting the line height in\r\n * all browsers.\r\n */\r\n\r\nsub,\r\nsup {\r\n  font-size: 75%;\r\n  line-height: 0;\r\n  position: relative;\r\n  vertical-align: baseline;\r\n}\r\n\r\nsub {\r\n  bottom: -0.25em;\r\n}\r\n\r\nsup {\r\n  top: -0.5em;\r\n}\r\n\r\n/* Embedded content\r\n   ========================================================================== */\r\n\r\n/**\r\n * Remove the border on images inside links in IE 10-.\r\n */\r\n\r\nimg {\r\n  border-style: none;\r\n}\r\n\r\n/**\r\n * Hide the overflow in IE.\r\n */\r\n\r\nsvg:not(:root) {\r\n  overflow: hidden;\r\n}\r\n\r\n/* Grouping content\r\n   ========================================================================== */\r\n\r\n/**\r\n * 1. Correct the inheritance and scaling of font size in all browsers.\r\n * 2. Correct the odd `em` font sizing in all browsers.\r\n */\r\n\r\ncode,\r\nkbd,\r\npre,\r\nsamp {\r\n  font-family: monospace, monospace; /* 1 */\r\n  font-size: 1em; /* 2 */\r\n}\r\n\r\n/**\r\n * Add the correct margin in IE 8.\r\n */\r\n\r\nfigure {\r\n  margin: 1em 40px;\r\n}\r\n\r\n/**\r\n * 1. Add the correct box sizing in Firefox.\r\n * 2. Show the overflow in Edge and IE.\r\n */\r\n\r\nhr {\r\n  box-sizing: content-box; /* 1 */\r\n  height: 0; /* 1 */\r\n  overflow: visible; /* 2 */\r\n}\r\n\r\n/* Forms\r\n   ========================================================================== */\r\n\r\n/**\r\n * 1. Change font properties to `inherit` in all browsers (opinionated).\r\n * 2. Remove the margin in Firefox and Safari.\r\n */\r\n\r\nbutton,\r\ninput,\r\nselect,\r\ntextarea {\r\n  font: inherit; /* 1 */\r\n  margin: 0; /* 2 */\r\n}\r\n\r\n/**\r\n * Restore the font weight unset by the previous rule.\r\n */\r\n\r\noptgroup {\r\n  font-weight: bold;\r\n}\r\n\r\n/**\r\n * Show the overflow in IE.\r\n * 1. Show the overflow in Edge.\r\n */\r\n\r\nbutton,\r\ninput { /* 1 */\r\n  overflow: visible;\r\n}\r\n\r\n/**\r\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\r\n * 1. Remove the inheritance of text transform in Firefox.\r\n */\r\n\r\nbutton,\r\nselect { /* 1 */\r\n  text-transform: none;\r\n}\r\n\r\n/**\r\n * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`\r\n *    controls in Android 4.\r\n * 2. Correct the inability to style clickable types in iOS and Safari.\r\n */\r\n\r\nbutton,\r\nhtml [type=\"button\"], /* 1 */\r\n[type=\"reset\"],\r\n[type=\"submit\"] {\r\n  -webkit-appearance: button; /* 2 */\r\n}\r\n\r\n/**\r\n * Remove the inner border and padding in Firefox.\r\n */\r\n\r\nbutton::-moz-focus-inner,\r\n[type=\"button\"]::-moz-focus-inner,\r\n[type=\"reset\"]::-moz-focus-inner,\r\n[type=\"submit\"]::-moz-focus-inner {\r\n  border-style: none;\r\n  padding: 0;\r\n}\r\n\r\n/**\r\n * Restore the focus styles unset by the previous rule.\r\n */\r\n\r\nbutton:-moz-focusring,\r\n[type=\"button\"]:-moz-focusring,\r\n[type=\"reset\"]:-moz-focusring,\r\n[type=\"submit\"]:-moz-focusring {\r\n  outline: 1px dotted ButtonText;\r\n}\r\n\r\n/**\r\n * Change the border, margin, and padding in all browsers (opinionated).\r\n */\r\n\r\nfieldset {\r\n  border: 1px solid #c0c0c0;\r\n  margin: 0 2px;\r\n  padding: 0.35em 0.625em 0.75em;\r\n}\r\n\r\n/**\r\n * 1. Correct the text wrapping in Edge and IE.\r\n * 2. Correct the color inheritance from `fieldset` elements in IE.\r\n * 3. Remove the padding so developers are not caught out when they zero out\r\n *    `fieldset` elements in all browsers.\r\n */\r\n\r\nlegend {\r\n  box-sizing: border-box; /* 1 */\r\n  color: inherit; /* 2 */\r\n  display: table; /* 1 */\r\n  max-width: 100%; /* 1 */\r\n  padding: 0; /* 3 */\r\n  white-space: normal; /* 1 */\r\n}\r\n\r\n/**\r\n * Remove the default vertical scrollbar in IE.\r\n */\r\n\r\ntextarea {\r\n  overflow: auto;\r\n}\r\n\r\n/**\r\n * 1. Add the correct box sizing in IE 10-.\r\n * 2. Remove the padding in IE 10-.\r\n */\r\n\r\n[type=\"checkbox\"],\r\n[type=\"radio\"] {\r\n  box-sizing: border-box; /* 1 */\r\n  padding: 0; /* 2 */\r\n}\r\n\r\n/**\r\n * Correct the cursor style of increment and decrement buttons in Chrome.\r\n */\r\n\r\n[type=\"number\"]::-webkit-inner-spin-button,\r\n[type=\"number\"]::-webkit-outer-spin-button {\r\n  height: auto;\r\n}\r\n\r\n/**\r\n * 1. Correct the odd appearance in Chrome and Safari.\r\n * 2. Correct the outline style in Safari.\r\n */\r\n\r\n[type=\"search\"] {\r\n  -webkit-appearance: textfield; /* 1 */\r\n  outline-offset: -2px; /* 2 */\r\n}\r\n\r\n/**\r\n * Remove the inner padding and cancel buttons in Chrome and Safari on OS X.\r\n */\r\n\r\n[type=\"search\"]::-webkit-search-cancel-button,\r\n[type=\"search\"]::-webkit-search-decoration {\r\n  -webkit-appearance: none;\r\n}\r\n\r\n/**\r\n * Correct the text style of placeholders in Chrome, Edge, and Safari.\r\n */\r\n\r\n::-webkit-input-placeholder {\r\n  color: inherit;\r\n  opacity: 0.54;\r\n}\r\n\r\n/**\r\n * 1. Correct the inability to style clickable types in iOS and Safari.\r\n * 2. Change font properties to `inherit` in Safari.\r\n */\r\n\r\n::-webkit-file-upload-button {\r\n  -webkit-appearance: button; /* 1 */\r\n  font: inherit; /* 2 */\r\n}\r\n","// Reset\r\n// ---------------------------------------\r\n\r\n// Reset all the things\r\n* { box-sizing: border-box; }\r\nhtml, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video { margin: 0; padding: 0; border: 0; font-size: 100%; font: inherit; vertical-align: baseline; }\r\narticle, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section { display: block; }\r\nhtml, body { height: 100%; }\r\na img { border: none; }\r\nblockquote { quotes: none; }\r\nblockquote:before, blockquote:after { content: ''; content: none; }\r\ntable { border-collapse: collapse; border-spacing: 0; }\r\ncaption, th, td { text-align: left; font-weight: normal; vertical-align: middle; }\r\n","// Typography\r\n// ---------------------------------------\r\n\r\n// Deprecation of global functions necessitates import.\r\n@use \"sass:map\";\r\n@use \"sass:string\";\r\n@use \"sass:list\";\r\n@use \"mixins\" as mixins;\r\n@use \"variables\" as variables;\r\n@use \"../_sass/_settings\" as settings;\r\n@use \"_modular-scale\" as modular-scale;\r\n\r\n// Setting root sizes and base styles.\r\nhtml {\r\n  -webkit-text-size-adjust: 100%;\r\n  -ms-text-size-adjust: 100%;\r\n  \r\n  @include mixins.rootsize;\r\n\r\n}\r\n\r\n// Site-wide base styles.\r\nbody {\r\n  font-family: string.unquote(map.get(variables.$bodytype, font-family));\r\n  font-style: normal;\r\n  font-weight: map.get(variables.$bodytype, regular);\r\n  line-height: 2rem;\r\n\r\n  @include mixins.fontsize(zeta, all);\r\n\r\n}\r\n\r\n// Links.\r\na {\r\n  color: settings.$linkColour;\r\n  text-decoration: none;\r\n  transition: color .1s, background-color .1s;\r\n\r\n  &:hover, &:active, &:focus {\r\n    color: settings.$hoverColour;\r\n    text-decoration: none;\r\n  }\r\n}\r\n\r\n// Styles for typeset text.\r\n.typeset {\r\n\r\n  // Nice underlines for text links.\r\n  p a, li a {\r\n    background-image: linear-gradient(to bottom,rgba(0, 0, 0, 0) 50%,settings.$linkColour 50%);\r\n    background-position: 0 93%;\r\n    background-repeat: repeat-x;\r\n    background-size: 100% 0.15rem;\r\n    text-shadow: 0.1rem 0 settings.$backgroundColour,\r\n                 0.15rem 0 settings.$backgroundColour,\r\n                -0.1rem 0 settings.$backgroundColour,\r\n                -0.15rem 0 settings.$backgroundColour;\r\n\r\n    &:hover, &:active, &:focus {\r\n      background-image: linear-gradient(to bottom,rgba(0, 0, 0, 0) 50%,settings.$hoverColour 50%);\r\n    }\r\n  }\r\n\r\n  // Paragraphs. OpenType ligatures and oldstyle figures enabled if available.\r\n  p {\r\n    font-feature-settings: 'kern', 'onum', 'liga';\r\n\r\n    @include mixins.baseline($fontsize: zeta, $font: variables.$bodytype, $lineheight: 2, $below: 2, $breakpoint: all);\r\n  }\r\n\r\n  // Headings. OpenType ligatures, discretionary ligatures and lining figures enabled if available.\r\n  h1, h2, h3, h4, h5, h6 {\r\n    color: settings.$headingColour;\r\n    font-family: string.unquote(map.get(settings.$headingtype, font-family));\r\n    font-feature-settings: 'dlig', 'liga', 'lnum', 'kern';\r\n    font-style: normal;\r\n    font-weight: map.get(settings.$headingtype, bold);\r\n  }\r\n\r\n  // Heading level 1.\r\n  h1, .alpha {\r\n    @include mixins.sassline($fontsize: alpha, $font: settings.$headingtype, $lineheight: 3, $below: 1, $breakpoint: all);\r\n  }\r\n\r\n  // Heading level 2.\r\n  h2, .beta {\r\n    @include mixins.sassline(beta, settings.$headingtype, 3, 1, all);\r\n  }\r\n\r\n  // Heading level 3.\r\n  h3, .gamma {\r\n    @include mixins.sassline(gamma, settings.$headingtype, 3, 1, all);\r\n  }\r\n\r\n  // Heading level 4.\r\n  h4, .delta {\r\n    @include mixins.sassline(delta, settings.$headingtype, 2, 0, all);\r\n  }\r\n\r\n  // Heading level 5.\r\n  h5, .epsilon {\r\n    @include mixins.sassline(epsilon, settings.$headingtype, 2, 0, all);\r\n  }\r\n\r\n  // Heading level 6.\r\n  h6, .zeta {\r\n    @include mixins.sassline(zeta, settings.$headingtype, 2, 0, all);\r\n  }\r\n\r\n  // Lists.\r\n  ul, ol {\r\n    @include mixins.baseline(zeta, variables.$bodytype, 2, 2, all);\r\n\r\n    li {\r\n      font-feature-settings: 'kern', 'onum', 'liga';\r\n      margin-left: 2rem;\r\n\r\n      @include mixins.breakpoint(break-1) {\r\n        margin-left: 0;\r\n      }\r\n\r\n      ol, ul {\r\n        padding-top: 1rem;\r\n        margin-bottom: 1rem;\r\n        margin-left: 2rem;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Ordered lists.\r\n  ol {\r\n    list-style-type: none;\r\n\r\n    li {\r\n      counter-increment: top-level;\r\n\r\n      &:before {\r\n        content: counter(top-level) '.';\r\n        font-feature-settings: 'lnum', 'tnum';\r\n        margin-left: -3rem;\r\n        position: absolute;\r\n        text-align: right;\r\n        width: 2em;\r\n      }\r\n\r\n      ul {\r\n\r\n        li {\r\n\r\n          &:before {\r\n            content: '';\r\n          }\r\n\r\n          ol {\r\n\r\n            li {\r\n              counter-increment: alt-level;\r\n\r\n              &:before {\r\n                content: counter(alt-level) '.';\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      ol {\r\n\r\n        li {\r\n          counter-increment: sub-level;\r\n\r\n          &:before {\r\n            content: counter(top-level) '.' counter(sub-level);\r\n          }\r\n\r\n          ul {\r\n\r\n            li {\r\n\r\n              &:before {\r\n                content: '';\r\n              }\r\n            }\r\n          }\r\n\r\n          ol {\r\n\r\n            li {\r\n              counter-increment: sub-sub-level;\r\n\r\n              &:before {\r\n                content: counter(top-level) '.' counter(sub-level) '.' counter(sub-sub-level);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Definition lists.\r\n  dl {\r\n    @include mixins.baseline(zeta, variables.$bodytype, 2, 2, all);\r\n\r\n    dt, dd {\r\n      font-feature-settings: 'kern', 'onum', 'liga';\r\n      margin-left: 2rem;\r\n\r\n      @include mixins.breakpoint(break-1) {\r\n        margin-left: 0;\r\n      }\r\n    }\r\n\r\n    dt {\r\n      font-weight: map.get(variables.$bodytype, bold);\r\n    }\r\n\r\n    dd + dt {\r\n      padding-top: 1rem;\r\n    }\r\n  }\r\n\r\n  // Tables.\r\n  table {\r\n\r\n    font-family: string.unquote(map.get(settings.$headingtype, font-family));\r\n    font-feature-settings: 'liga', 'lnum', 'tnum', 'kern';\r\n    font-style: normal;\r\n    font-weight: map.get(settings.$headingtype, regular);\r\n    width: 100%;\r\n    \r\n    @include mixins.sassline(eta, settings.$headingtype, 2, 0, all);\r\n\r\n    thead {\r\n\r\n      th {\r\n        padding-bottom: 1px;\r\n        @include mixins.sassline(zeta, settings.$headingtype, 2, 0, all);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Bold.\r\n  b, strong, .bold {\r\n    font-weight: map.get(variables.$bodytype, bold);\r\n  }\r\n\r\n  // Italic.\r\n  em, i, .italic {\r\n    font-style: map.get(variables.$bodytype, italic);\r\n  }\r\n\r\n  // Caption and inline small text.\r\n  small, .caption {\r\n    font-family: string.unquote(map.get(settings.$headingtype, font-family));\r\n    font-style: normal;\r\n    font-weight: map.get(settings.$headingtype, regular);\r\n\r\n    @include mixins.fontsize(theta, all);\r\n  }\r\n\r\n  small {\r\n    line-height: 1rem;\r\n  }\r\n\r\n  .caption {\r\n    color: settings.$captionColour;\r\n\r\n    @include mixins.baseline(theta, settings.$headingtype, 2, 2, all);\r\n\r\n  }\r\n\r\n  // Nice spacing for captions.\r\n  h1 + .caption, .alpha + .caption, h2 + .caption, .beta + .caption, h3 + .caption, .gamma + .caption {\r\n    margin-top: -1rem;\r\n  }\r\n\r\n  .delta + .caption, .epsilon + .caption, .zeta + .caption {\r\n    margin-top: 0rem;\r\n  }\r\n\r\n  // Quotes.\r\n  blockquote {\r\n\r\n    p {\r\n      border-left: 0.15rem solid settings.$linkColour;\r\n      font-style: map.get(variables.$bodytype, italic);\r\n      padding-left: 1rem;\r\n\r\n      // Add spacing below blockquote paragraphs to align to baseline grid.\r\n      $get-scale: map.get(modular-scale.$modular-scale, scale-0);\r\n      $get-size: map.get($get-scale, zeta);\r\n      $rootsize: list.nth(mixins.$sizes, 1);\r\n      $baseline-shift: #{calc((calc($get-size / 2) * ((2 * $rootsize / $get-size) - map.get(variables.$bodytype, cap-height))) / $rootsize) + 0.00001};\r\n      $baseline-push: #{3 - (calc(($get-size * ((2 * calc($rootsize / $get-size)) - map.get(variables.$bodytype, cap-height))) / $rootsize) + 0.00001)};\r\n\r\n      margin-bottom: #{$baseline-push}rem;\r\n      padding-bottom: #{$baseline-shift}rem;\r\n\r\n      @for $i from 2 through mixins.$breakpoints-limit {\r\n        $get-scale: map.get(modular-scale.$modular-scale, scale-#{$i - 1});\r\n        $get-size: map.get($get-scale, zeta);\r\n        $rootsize: list.nth(mixins.$sizes, $i);\r\n        $baseline-shift: #{calc((calc($get-size / 2) * ((2 * $rootsize / $get-size) - map.get(variables.$bodytype, cap-height))) / $rootsize) + 0.00001};\r\n        $baseline-push: #{3 - (calc(($get-size * ((2 * calc($rootsize / $get-size)) - map.get(variables.$bodytype, cap-height))) / $rootsize) + 0.00001)};\r\n\r\n        @media screen and (min-width: calc(list.nth(mixins.$points, $i) / 16 * 1em )) {\r\n          margin-bottom: #{$baseline-push}rem;\r\n          padding-bottom: #{$baseline-shift}rem;\r\n        }\r\n      }\r\n    }\r\n\r\n    @include mixins.breakpoint(break-1) {\r\n      margin-left: -1rem;\r\n    }\r\n  }\r\n\r\n  // Horizontal rule.\r\n  hr {\r\n    background-image: linear-gradient(to bottom,rgba(0, 0, 0, 0) 50%,settings.$captionColour 50%);\r\n    background-position: 0 50%;\r\n    background-repeat: repeat-x;\r\n    background-size: 100% 0.15rem;\r\n    border: 0;\r\n    margin: 0;\r\n    padding-bottom: 3rem;\r\n    padding-top: 3rem;\r\n  }\r\n\r\n  // Code block.\r\n  code, pre {\r\n    background-color: settings.$codeBackgroundColour;\r\n    font-family: string.unquote(map.get(settings.$monospacetype, font-family));\r\n  }\r\n\r\n  pre {\r\n    display: block;\r\n    margin-bottom: 2rem;\r\n    padding: 1rem;\r\n    white-space: pre;\r\n    white-space: pre-wrap;\r\n    word-break: break-all;\r\n    word-wrap: break-word;\r\n  }\r\n\r\n  code {\r\n    line-height: 1rem;\r\n\r\n    @include mixins.fontsize(theta, all);\r\n\r\n  }\r\n\r\n  // Letter space those capitals people, Jan Tschichold would be proud.\r\n  .upper {\r\n    font-kerning: normal;\r\n    letter-spacing: 0.1rem;\r\n    text-transform: uppercase;\r\n  }\r\n\r\n  // Real small caps.\r\n  .small-caps {\r\n    font-feature-settings: 'smcp', 'kern';\r\n    font-kerning: normal;\r\n    letter-spacing: 0.1rem;\r\n  }\r\n\r\n  // Consistent height numbers with OpenType.\r\n  .lining-numerals {\r\n    font-feature-settings: 'lnum', 'kern';\r\n  }\r\n\r\n  // Ascending and descending numbers with OpenType.\r\n  .oldstyle-numerals {\r\n    font-feature-settings: 'onum', 'kern';\r\n  }\r\n}\r\n","// SCSS mixins\r\n// ---------------------------------------\r\n\r\n// Deprecation of global built-in functions necessitates import.\r\n@use \"sass:map\";\r\n@use \"sass:meta\";\r\n@use \"sass:list\";\r\n@use \"variables\" as variables;\r\n@use \"modular-scale\" as modular-scale;\r\n\r\n// Global variables used in mixins.\r\n\r\n// Number of breakpoints.\r\n$breakpoints-limit: list.length(variables.$breakpoints);\r\n\r\n// List of rootsizes, breakpoints, and max-widths.\r\n$sizes: map.values(variables.$rootsizes);\r\n$points: map.values(variables.$breakpoints);\r\n$line-widths: map.values(variables.$measures);\r\n$max-widths: map.values(variables.$maxwidths);\r\n\r\n\r\n// Breakpoints. Either set one to one of the breakpoint variables, or use a custom value for minor breakpoints.\r\n// Defaults to min-width, but both min->max and max-width are available too.\r\n// Parts based on https://gist.github.com/timknight/03e6335b8816aa534cf7\r\n@mixin breakpoint($break: 0, $max: 0) {\r\n  // Type of break variable\r\n  $value: meta.type-of($break);\r\n\r\n  // If it is a string (i.e. a breakpoint variable).\r\n  @if $value == string {\r\n    // If using 'break-1', 'break-2' etc output the correct breakpoints from map.\r\n    @if map.has-key(variables.$breakpoints, $break) {\r\n      @media screen and (min-width: #{calc(map.get(variables.$breakpoints, $break) / 16 ) * 1em} ) { @content; }\r\n    } @else {\r\n      @warn \"#{$break} is not a set breakpoint variable\";\r\n    }\r\n\r\n  // If it is a number, use this for the breakpoint.\r\n  } @else if $value == number {\r\n    // If using other numbers output value in ems either for min, min & max or max width breakpoints.\r\n    $query: \"all\" !default;\r\n    @if      $break != 0 and $max != 0 { $query: \"(min-width: #{$break / 16 * 1em}) and (max-width: #{$max / 16 * 1em})\"; }\r\n    @else if $break != 0 and $max == 0 { $query: \"(min-width: #{$break / 16 * 1em})\"; }\r\n    @else if $break == 0 and $max != 0 { $query: \"(max-width: #{$max / 16 * 1em})\"; }\r\n    @media #{$query} { @content; }\r\n\r\n  } @else {\r\n    @warn \"#{$break} is not valid to use as a breakpoint\";\r\n  }\r\n}\r\n\r\n// Root font-size in %, outputted in correct breakpoints.\r\n@mixin rootsize {\r\n  font-size: calc(list.nth($sizes, 1) / 16 ) * 100%;\r\n\r\n  // Loop through breakpoints.\r\n  @for $i from 2 through $breakpoints-limit {\r\n    @media screen and (min-width: calc((list.nth($points, $i) / 16 ) * 1em )) {\r\n      font-size: calc(list.nth($sizes, $i) / 16 ) * 100%;\r\n    }\r\n  }\r\n}\r\n\r\n// Max-widths for typeset containers, outputted in correct breakpoints.\r\n@mixin maxwidth($breakpoint: 0) {\r\n  // Type of chosen variables.\r\n  $break-value: meta.type-of($breakpoint);\r\n\r\n  // If specifying a breakpoint to use (and breakpoint exists).\r\n  @if $break-value == number and $breakpoint <= ($breakpoints-limit - 1) and $breakpoint >= 0 {\r\n\r\n    max-width: #{calc(list.nth($max-widths, ($breakpoint + 1)) / list.nth($sizes, ($breakpoint + 1)))}rem;\r\n\r\n  } @else if $breakpoint == all {\r\n    max-width: #{list.nth($max-widths, 1) / list.nth($sizes, 1)}rem;\r\n\r\n    // Loop through breakpoints.\r\n    @for $i from 2 through $breakpoints-limit {\r\n      @media screen and (min-width: calc((list.nth($points, $i) / 16 ) * 1em )) {\r\n        max-width: #{list.nth($max-widths, $i) / list.nth($sizes, $i)}rem;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Set the measure for single columns, outputted in correct breakpoints.\r\n@mixin measure($breakpoint: 0) {\r\n  // Type of chosen variables.\r\n  $break-value: meta.type-of($breakpoint);\r\n\r\n  // If specifying a breakpoint to use (and breakpoint exists).\r\n  @if $break-value == number and $breakpoint <= ($breakpoints-limit - 1) and $breakpoint >= 0 {\r\n\r\n    max-width: #{list.nth($line-widths, ($breakpoint + 1)) / list.nth($sizes, ($breakpoint + 1))}rem;\r\n\r\n  } @else if $breakpoint == all {\r\n    max-width: #{list.nth($line-widths, 1) / list.nth($sizes, 1)}rem;\r\n\r\n    // Loop through breakpoints.\r\n    @for $i from 2 through $breakpoints-limit {\r\n      @media screen and (min-width: calc((list.nth($points, $i) / 16 ) * 1em )) {\r\n        max-width: #{list.nth($line-widths, $i) / list.nth($sizes, $i)}rem;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Calculate percentage width of container to get optimal measure for main text columns.\r\n// Defaults to all breakpoints.\r\n// Note: will not output for base breakpoint as this comes from the 'measure' mixin.\r\n@mixin ideal-measure($breakpoint: 0, $gutter: 0, $main: true, $output: max-width) {\r\n  // Type of chosen variables.\r\n  $break-value: meta.type-of($breakpoint);\r\n\r\n  // If specifying a breakpoint to use (and breakpoint exists and is larger than 0).\r\n  @if $break-value == number and $breakpoint <= ($breakpoints-limit - 1) and $breakpoint > 0 {\r\n\r\n    @if $gutter == small {\r\n      $gutter: map.get($gutterwidths, small) * 2 / 1rem;\r\n    } @else if $gutter == medium {\r\n      $gutter: map.get($gutterwidths, medium) * 2 / 1rem;\r\n    } @else if $gutter == large {\r\n      $gutter: map.get($gutterwidths, large) * 2 / 1rem;\r\n    } @else {\r\n      $gutter: 0;\r\n    }\r\n\r\n    $rootsize: map.get($rootsizes, rootsize-#{$breakpoint});\r\n    $ideal-measure: map.get($measures, measure-#{$breakpoint});\r\n    $gutter-size: ($gutter * $rootsize);\r\n    $container-width: map.get($maxwidths, width-#{$breakpoint});\r\n\r\n    $percentage: percentage(($ideal-measure + $gutter-size) / $container-width);\r\n\r\n    @if $percentage < 55 {\r\n      $percentage: 55%;\r\n    } @else if $percentage > 65 {\r\n      $percentage: 65%;\r\n    }\r\n\r\n    @if $main == false {\r\n      $percentage: 100 - $percentage;\r\n    }\r\n\r\n    #{$output}: $percentage;\r\n  }\r\n}\r\n\r\n// Value in scale in $modular-scale?\r\n// Used in following fontsize mixin.\r\n@function in-modular-scale($scale, $key) {\r\n  $map: map.get(modular-scale.$modular-scale, $scale);\r\n  $output: map.has-key($map, $key);\r\n  @return $output;\r\n}\r\n\r\n// Font-size in rems. Either set per breakpoint or for all.\r\n// Use values as you would for pixels i.e. 16 or use values from the modular scale.\r\n@mixin fontsize($fontsize, $breakpoint: 0) {\r\n  // Type of chosen variables.\r\n  $font-value: meta.type-of($fontsize);\r\n  $break-value: meta.type-of($breakpoint);\r\n\r\n  // Check if value exists in scale.\r\n  $in-scale: in-modular-scale(scale-0, $fontsize);\r\n\r\n  // If specifying a breakpoint to use (and breakpoint exists).\r\n  @if $break-value == number and $breakpoint <= ($breakpoints-limit - 1) and $breakpoint >= 0 {\r\n\r\n    // If using a number for fontsize.\r\n    @if $font-value == number {\r\n      font-size: #{$fontsize / list.nth($sizes, ($breakpoint + 1))}rem;\r\n\r\n    // If using a variable from the scale for fontsize.\r\n    } @else if $in-scale == true {\r\n      $get-scale: map.get(modular-scale.$modular-scale, scale-#{$breakpoint});\r\n      $get-size: map.get($get-scale, $fontsize);\r\n\r\n      font-size: #{$get-size / list.nth($sizes, ($breakpoint + 1))}rem;\r\n\r\n    } @else {\r\n      @warn \"#{$fontsize} is not a valid scale variable\";\r\n    }\r\n\r\n  // If want to use value for all breakpoints.\r\n  } @else if $breakpoint == all {\r\n\r\n    // If using a number for fontsize.\r\n    @if $font-value == number {\r\n      font-size: #{$fontsize / list.nth($sizes, 1)}rem;\r\n\r\n      // Loop through breakpoints.\r\n      @for $i from 2 through $breakpoints-limit {\r\n        @media screen and (min-width: calc((list.nth($points, $i) / 16 ) * 1em )) {\r\n          font-size: #{$fontsize / list.nth($sizes, $i)}rem;\r\n        }\r\n      }\r\n\r\n    // If using a variable from the scale for fontsize.\r\n    } @else if $in-scale == true {\r\n      $get-scale: map.get(modular-scale.$modular-scale, scale-0);\r\n      $get-size: map.get($get-scale, $fontsize);\r\n      font-size: #{calc($get-size / list.nth($sizes, 1))}rem;\r\n\r\n      // Loop through breakpoints.\r\n      @for $i from 2 through $breakpoints-limit {\r\n        $get-scale: map.get(modular-scale.$modular-scale, scale-#{$i - 1});\r\n        $get-size: map.get($get-scale, $fontsize);\r\n\r\n        @media screen and (min-width: calc((list.nth($points, $i) / 16 ) * 1em )) {\r\n          font-size: #{calc($get-size / list.nth($sizes, $i))}rem;\r\n        }\r\n      }\r\n\r\n    } @else {\r\n      @warn \"#{$fontsize} is not a valid scale variable\";\r\n    }\r\n\r\n  } @else {\r\n    @warn \"#{$breakpoint} is not valid to use as a breakpoint\";\r\n  }\r\n}\r\n\r\n// Advanced baseline magic.\r\n// ! Read the README to help understand what is going on here.\r\n// Parts based on https://gist.github.com/razwan/10662500\r\n@mixin baseline($fontsize, $font, $lineheight: 2, $below: 2, $breakpoint: 0) {\r\n  // Type of chosen variables.\r\n  $font-value: meta.type-of($fontsize);\r\n  $break-value: meta.type-of($breakpoint);\r\n\r\n  // Cap height\r\n  $cap-height: map.get($font, cap-height);\r\n\r\n  // Check if value exists in scale.\r\n  $in-scale: in-modular-scale(scale-0, $fontsize);\r\n\r\n  // Set the line-height (if it isn't set at 0).\r\n  @if $lineheight != 0 {\r\n    line-height: #{$lineheight}rem;\r\n  }\r\n\r\n  // If specifying a breakpoint to use (and breakpoint exists).\r\n  @if $break-value == number and $breakpoint <= ($breakpoints-limit - 1) and $breakpoint >= 0 {\r\n\r\n    // If using a number for fontsize.\r\n    @if $font-value == number {\r\n      $rootsize: list.nth($sizes, ($breakpoint + 1));\r\n      $baseline-shift: #{($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001};\r\n      $baseline-push: #{$below - (($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001)};\r\n\r\n      margin-bottom: #{$baseline-push}rem;\r\n      padding-top: #{$baseline-shift}rem;\r\n\r\n    // If using a variable from the scale for fontsize.\r\n    } @else if $in-scale == true {\r\n      $get-scale: map.get(modular-scale.$modular-scale, scale-#{$breakpoint});\r\n      $get-size: map.get($get-scale, $fontsize);\r\n      $rootsize: list.nth($sizes, ($breakpoint + 1));\r\n\r\n      $baseline-shift: #{calc((calc($get-size / 2) * (($lineheight * calc($rootsize / $get-size)) - $cap-height)) / $rootsize) + 0.00001};\r\n      $baseline-push: #{$below - (calc((calc($get-size / 2) * (($lineheight * calc($rootsize / $get-size)) - $cap-height)) / $rootsize) + 0.00001)};\r\n\r\n      margin-bottom: #{$baseline-push}rem;\r\n      padding-top: #{$baseline-shift}rem;\r\n\r\n    } @else {\r\n      @warn \"#{$fontsize} is not a valid scale variable\";\r\n    }\r\n\r\n  // If want to use value for all breakpoints.\r\n  } @else if $breakpoint == all {\r\n\r\n    // If using a number for fontsize.\r\n    @if $font-value == number {\r\n      $rootsize: list.nth($sizes, 1);\r\n      $baseline-shift: #{($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001};\r\n      $baseline-push: #{$below - (($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001)};\r\n\r\n      margin-bottom: #{$baseline-push}rem;\r\n      padding-top: #{$baseline-shift}rem;\r\n\r\n      // Loop through breakpoints.\r\n      @for $i from 2 through $breakpoints-limit {\r\n        $rootsize: list.nth($sizes, $i);\r\n        $baseline-shift: #{($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001};\r\n        $baseline-push: #{$below - (($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001)};\r\n\r\n        @media screen and (min-width: calc((list.nth($points, $i) / 16 ) * 1em )) {\r\n          margin-bottom: #{$baseline-push}rem;\r\n          padding-top: #{$baseline-shift}rem;\r\n        }\r\n      }\r\n\r\n    // If using a variable from the scale for fontsize.\r\n    } @else if $in-scale == true {\r\n      $get-scale: map.get(modular-scale.$modular-scale, scale-0);\r\n      $get-size: map.get($get-scale, $fontsize);\r\n      $rootsize: list.nth($sizes, 1);\r\n\r\n      $baseline-shift: #{calc((calc($get-size / 2) * (($lineheight * calc($rootsize / $get-size)) - $cap-height)) / $rootsize) + 0.00001};;\r\n      $baseline-push: #{$below - (calc((calc($get-size / 2) * (($lineheight * calc($rootsize / $get-size)) - $cap-height)) / $rootsize) + 0.00001)};\r\n\r\n      margin-bottom: #{$baseline-push}rem;\r\n      padding-top: #{$baseline-shift}rem;\r\n\r\n      // Loop through breakpoints.\r\n      @for $i from 2 through $breakpoints-limit {\r\n        $get-scale: map.get(modular-scale.$modular-scale, scale-#{$i - 1});\r\n        $get-size: map.get($get-scale, $fontsize);\r\n        $rootsize: list.nth($sizes, $i);\r\n\r\n        $baseline-shift: #{calc((calc($get-size / 2) * (($lineheight * calc($rootsize / $get-size)) - $cap-height)) / $rootsize) + 0.00001};;\r\n        $baseline-push: #{$below - (calc((calc($get-size / 2) * (($lineheight * calc($rootsize / $get-size)) - $cap-height)) / $rootsize) + 0.00001)};\r\n\r\n        @media screen and (min-width: calc((list.nth($points, $i) / 16 ) * 1em )) {\r\n          margin-bottom: #{$baseline-push}rem;\r\n          padding-top: #{$baseline-shift}rem;\r\n        }\r\n      }\r\n\r\n    } @else {\r\n      @warn \"#{$fontsize} is not a valid scale variable\";\r\n    }\r\n\r\n  } @else {\r\n    @warn \"#{$breakpoint} is not valid to use as a breakpoint\";\r\n  }\r\n}\r\n\r\n// Set fontsize and baseline at once. Mix of fontsize and baseline mixin.\r\n@mixin sassline($fontsize, $font, $lineheight: 2, $below: 2, $breakpoint: 0) {\r\n  $font-value: meta.type-of($fontsize);\r\n  $break-value: meta.type-of($breakpoint);\r\n  $cap-height: map.get($font, cap-height);\r\n  $in-scale: in-modular-scale(scale-0, $fontsize);\r\n\r\n  line-height: #{$lineheight}rem;\r\n\r\n  @if $break-value == number and $breakpoint <= ($breakpoints-limit - 1) and $breakpoint >= 0 {\r\n\r\n    @if $font-value == number {\r\n      $rootsize: list.nth($sizes, ($breakpoint + 1));\r\n      $baseline-shift: #{($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001};\r\n      $baseline-push: #{$below - (($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001)};\r\n      font-size: #{$fontsize / list.nth($sizes, ($breakpoint + 1))}rem;\r\n      margin-bottom: #{$baseline-push}rem;\r\n      padding-top: #{$baseline-shift}rem;\r\n\r\n    } @else if $in-scale == true {\r\n      $get-scale: map.get(modular-scale.$modular-scale, scale-#{$breakpoint});\r\n      $get-size: map.get($get-scale, $fontsize);\r\n      $rootsize: list.nth($sizes, ($breakpoint + 1));\r\n      $baseline-shift: #{calc((calc($get-size / 2) * (($lineheight * calc($rootsize / $get-size)) - $cap-height)) / $rootsize) + 0.00001};;\r\n      $baseline-push: #{$below - (calc((calc($get-size / 2) * (($lineheight * calc($rootsize / $get-size)) - $cap-height)) / $rootsize) + 0.00001)};\r\n      font-size: #{$get-size / list.nth($sizes, ($breakpoint + 1))}rem;\r\n      margin-bottom: #{$baseline-push}rem;\r\n      padding-top: #{$baseline-shift}rem;\r\n\r\n    } @else {\r\n      @warn \"#{$fontsize} is not a valid scale variable\";\r\n    }\r\n\r\n  } @else if $breakpoint == all {\r\n\r\n    @if $font-value == number {\r\n      $rootsize: list.nth($sizes, 1);\r\n      $baseline-shift: #{($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001};\r\n      $baseline-push: #{$below - (($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001)};\r\n      font-size: #{$fontsize / list.nth($sizes, 1)}rem;\r\n      margin-bottom: #{$baseline-push}rem;\r\n      padding-top: #{$baseline-shift}rem;\r\n\r\n      @for $i from 2 through $breakpoints-limit {\r\n        $rootsize: list.nth($sizes, $i);\r\n        $baseline-shift: #{($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001};\r\n        $baseline-push: #{$below - (($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001)};\r\n        @media screen and (min-width: calc((list.nth($points, $i) / 16 ) * 1em )) {\r\n          font-size: #{$fontsize / list.nth($sizes, $i)}rem;\r\n          margin-bottom: #{$baseline-push}rem;\r\n          padding-top: #{$baseline-shift}rem;\r\n        }\r\n      }\r\n\r\n    } @else if $in-scale == true {\r\n      $get-scale: map.get(modular-scale.$modular-scale, scale-0);\r\n      $get-size: map.get($get-scale, $fontsize);\r\n      $rootsize: list.nth($sizes, 1);\r\n      $baseline-shift: #{calc((calc($get-size / 2) * (($lineheight * calc($rootsize / $get-size)) - $cap-height)) / $rootsize) + 0.00001};;\r\n      $baseline-push: #{$below - (calc((calc($get-size / 2) * (($lineheight * calc($rootsize / $get-size)) - $cap-height)) / $rootsize) + 0.00001)};\r\n      font-size: #{calc($get-size / list.nth($sizes, 1))}rem;\r\n      margin-bottom: #{$baseline-push}rem;\r\n      padding-top: #{$baseline-shift}rem;\r\n\r\n      @for $i from 2 through $breakpoints-limit {\r\n        $get-scale: map.get(modular-scale.$modular-scale, scale-#{$i - 1});\r\n        $get-size: map.get($get-scale, $fontsize);\r\n        $rootsize: list.nth($sizes, $i);\r\n        $baseline-shift: #{calc((calc($get-size / 2) * (($lineheight * calc($rootsize / $get-size)) - $cap-height)) / $rootsize) + 0.00001};;\r\n        $baseline-push: #{$below - (calc((calc($get-size / 2) * (($lineheight * calc($rootsize / $get-size)) - $cap-height)) / $rootsize) + 0.00001)};\r\n        @media screen and (min-width: calc((list.nth($points, $i) / 16 ) * 1em )) {\r\n          font-size: #{calc($get-size / list.nth($sizes, $i))}rem;\r\n          margin-bottom: #{$baseline-push}rem;\r\n          padding-top: #{$baseline-shift}rem;\r\n        }\r\n      }\r\n\r\n    } @else {\r\n      @warn \"#{$fontsize} is not a valid scale variable\";\r\n    }\r\n\r\n  } @else {\r\n    @warn \"#{$breakpoint} is not valid to use as a breakpoint\";\r\n  }\r\n}\r\n\r\n// Clearfix.\r\n@mixin clearfix {\r\n  &:before, &:after{\r\n    display: table;\r\n    content: \"\";\r\n  }\r\n  &:after{\r\n    clear: both;\r\n  }\r\n}\r\n","// Background colours\r\n$backgroundColour: #ffffff !default;\r\n$codeBackgroundColour: #fafafa !default;\r\n$featureBackgroundColour: #f9fafa !default;\r\n$accentColour: #05bf85 !default;\r\n\r\n// Text colours\r\n$headingColour: #242e2b !default;\r\n$bodyColour: #384743 !default;\r\n$linkColour: #05bf85 !default;\r\n$hoverColour: #008000 !default;\r\n$focusColour: #fa407a !default;\r\n$captionColour: #a8adac !default;\r\n$white: #ffffff !default;\r\n\r\n// Typography\r\n$bodytype: (\r\n  font-family: \"Georgia, serif\",\r\n  regular: 400,\r\n  bold: 700,\r\n  italic: italic,\r\n  cap-height: 0.75\r\n) !default;\r\n\r\n$headingtype: (\r\n  font-family: '\"Merriweather\", serif',\r\n  regular: 400,\r\n  bold: 700,\r\n  cap-height: 0.75\r\n) !default;\r\n\r\n$monospacetype: (\r\n  font-family: \"Menlo, monospace\",\r\n  regular: 400,\r\n  cap-height: 0.68\r\n) !default;\r\n\r\n// TIP: Load custom fonts in _config.yaml\r\n",".hll { background-color: #ffffcc }\r\n.c { color: #999988; font-style: italic } /* Comment */\r\n.err { color: #a61717; background-color: #e3d2d2 } /* Error */\r\n.k { color: #000000; font-weight: bold } /* Keyword */\r\n.o { color: #000000; font-weight: bold } /* Operator */\r\n.cm { color: #999988; font-style: italic } /* Comment.Multiline */\r\n.cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */\r\n.c1 { color: #999988; font-style: italic } /* Comment.Single */\r\n.cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */\r\n.gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */\r\n.ge { color: #000000; font-style: italic } /* Generic.Emph */\r\n.gr { color: #aa0000 } /* Generic.Error */\r\n.gh { color: #999999 } /* Generic.Heading */\r\n.gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */\r\n.go { color: #888888 } /* Generic.Output */\r\n.gp { color: #555555 } /* Generic.Prompt */\r\n.gs { font-weight: bold } /* Generic.Strong */\r\n.gu { color: #aaaaaa } /* Generic.Subheading */\r\n.gt { color: #aa0000 } /* Generic.Traceback */\r\n.kc { color: #000000; font-weight: bold } /* Keyword.Constant */\r\n.kd { color: #000000; font-weight: bold } /* Keyword.Declaration */\r\n.kn { color: #000000; font-weight: bold } /* Keyword.Namespace */\r\n.kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */\r\n.kr { color: #000000; font-weight: bold } /* Keyword.Reserved */\r\n.kt { color: #445588; font-weight: bold } /* Keyword.Type */\r\n.m { color: #009999 } /* Literal.Number */\r\n.s { color: #d01040 } /* Literal.String */\r\n.na { color: #008080 } /* Name.Attribute */\r\n.nb { color: #0086B3 } /* Name.Builtin */\r\n.nc { color: #445588; font-weight: bold } /* Name.Class */\r\n.no { color: #008080 } /* Name.Constant */\r\n.nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */\r\n.ni { color: #800080 } /* Name.Entity */\r\n.ne { color: #990000; font-weight: bold } /* Name.Exception */\r\n.nf { color: #990000; font-weight: bold } /* Name.Function */\r\n.nl { color: #990000; font-weight: bold } /* Name.Label */\r\n.nn { color: #555555 } /* Name.Namespace */\r\n.nt { color: #000080 } /* Name.Tag */\r\n.nv { color: #008080 } /* Name.Variable */\r\n.ow { color: #000000; font-weight: bold } /* Operator.Word */\r\n.w { color: #bbbbbb } /* Text.Whitespace */\r\n.mf { color: #009999 } /* Literal.Number.Float */\r\n.mh { color: #009999 } /* Literal.Number.Hex */\r\n.mi { color: #009999 } /* Literal.Number.Integer */\r\n.mo { color: #009999 } /* Literal.Number.Oct */\r\n.sb { color: #d01040 } /* Literal.String.Backtick */\r\n.sc { color: #d01040 } /* Literal.String.Char */\r\n.sd { color: #d01040 } /* Literal.String.Doc */\r\n.s2 { color: #d01040 } /* Literal.String.Double */\r\n.se { color: #d01040 } /* Literal.String.Escape */\r\n.sh { color: #d01040 } /* Literal.String.Heredoc */\r\n.si { color: #d01040 } /* Literal.String.Interpol */\r\n.sx { color: #d01040 } /* Literal.String.Other */\r\n.sr { color: #009926 } /* Literal.String.Regex */\r\n.s1 { color: #d01040 } /* Literal.String.Single */\r\n.ss { color: #990073 } /* Literal.String.Symbol */\r\n.bp { color: #999999 } /* Name.Builtin.Pseudo */\r\n.vc { color: #008080 } /* Name.Variable.Class */\r\n.vg { color: #008080 } /* Name.Variable.Global */\r\n.vi { color: #008080 } /* Name.Variable.Instance */\r\n.il { color: #009999 } /* Literal.Number.Integer.Long */\r\n","// Stricter scoping rules for Sass requires explicitly bringing in variables.\r\n@use \"settings\" as settings;\r\n@use \"flex\" as flex;\r\n@use \"../_sass/sassline-base/_mixins.scss\" as mixins;\r\n\r\n// Structural elements\r\nbody {\r\n  background: settings.$backgroundColour;\r\n  color: settings.$bodyColour;\r\n  height: 100%;\r\n  display: flex;\r\n  @include flex.flex-direction(column);\r\n  overflow-x: hidden;\r\n}\r\n\r\n.container {\r\n  width: 90%;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n\r\n\r\n// Header, feature and footer\r\n.header,\r\n.footer {\r\n  .nav {\r\n    text-align: right;\r\n  }\r\n  .logo {\r\n    @include flex.flex(0 0 auto);\r\n  }\r\n  .container {\r\n    @include flex.flexbox;\r\n    @include flex.flex-direction(row);\r\n    @include flex.justify-content(space-between);\r\n    padding: 1rem 0;\r\n    @include mixins.breakpoint(break-1) {\r\n      @include flex.align-items(center);\r\n    }\r\n  }\r\n}\r\n\r\n.header .nav {\r\n  display: flex;\r\n  flex-direction: column-reverse;\r\n  align-items: flex-end;\r\n  justify-content: flex-end;\r\n  overflow: hidden;\r\n}\r\n\r\n.feature {\r\n  padding-bottom: .4rem;\r\n  margin-bottom: 1.6rem;\r\n  text-align: center;\r\n  background: settings.$featureBackgroundColour;\r\n  background-size: cover;\r\n  background-position: center;\r\n  .container {\r\n    min-height: 35vh;\r\n    max-width: 60%;\r\n    @include flex.flex-direction(column);\r\n    @include flex.justify-content(center);\r\n  }\r\n}\r\n\r\n.logo {\r\n  display: inline-block;\r\n  line-height: 0;\r\n  max-height: 4rem;\r\n  @include flex.flexbox;\r\n  @include flex.align-items(center);\r\n  img {\r\n    max-height: 5rem;\r\n  }\r\n}\r\n\r\n.nav {\r\n  a {\r\n    padding: .2rem;\r\n  }\r\n  &--social a {\r\n    display: inline-block;\r\n    line-height: 1;\r\n  }\r\n}\r\n\r\n.small {\r\n  padding-top: .8rem;\r\n  color: settings.$captionColour;\r\n  display: inline-block;\r\n}\r\n\r\n.footer {\r\n  background: settings.$headingColour;\r\n  color: settings.$captionColour;\r\n  a {\r\n    color: settings.$captionColour;\r\n    &:hover {\r\n      color: settings.$backgroundColour;\r\n    }\r\n  }\r\n  .container {\r\n    @include flex.flex-wrap(wrap);\r\n  }\r\n  .small {\r\n    padding-top: 0;\r\n  }\r\n}\r\n\r\n\r\n// Pagination nav\r\n.nav--paginator {\r\n  @include flex.flexbox;\r\n  @include flex.justify-content(space-between);\r\n  color: settings.$captionColour;\r\n  text-align: center;\r\n}\r\n\r\n.pagination {\r\n  min-width: 20%;\r\n}\r\n\r\n\r\n// Main content\r\n.main {\r\n  @include flex.flexbox;\r\n  @include flex.flex-direction(column);\r\n  @include flex.flex(1, 0, auto);\r\n  @include flex.justify-content(flex-start);\r\n  margin-bottom: 1.6rem;\r\n  @include mixins.breakpoint(break-1) {\r\n    @include flex.justify-content(center);\r\n    @include flex.flex-direction(row);\r\n  }\r\n}\r\n\r\n.header,\r\n.feature,\r\n.footer {\r\n  @include flex.flex(0, 0, auto);\r\n}\r\n\r\n.content {\r\n  @include mixins.breakpoint(break-1) {\r\n    width: 62%;\r\n  }\r\n}\r\n\r\n.share .button {\r\n  margin-right: .3rem;\r\n}\r\n\r\n.aside {\r\n  @include mixins.breakpoint(break-1) {\r\n    max-width: 34%;\r\n    margin-left: 4%;\r\n    @include flex.flex(1, 0, auto);\r\n    opacity: 0.5;\r\n    transition: opacity .1s;\r\n    .section {\r\n      position: sticky;\r\n      top: 0;\r\n    }\r\n    &--left {\r\n      margin-left: 0;\r\n      margin-right: 4%;\r\n      order: -1;\r\n    }\r\n    &:hover {\r\n      opacity: 1;\r\n    }\r\n  }\r\n}\r\n\r\n.section {\r\n  margin: 0;\r\n}\r\n\r\n\r\n// Lists\r\n.list {\r\n  list-style: none;\r\n  &--nav {\r\n    overflow: hidden;\r\n    margin-bottom: var(--listHeight, 0);\r\n  }\r\n  .item--post,\r\n  .item--result,\r\n  .item--category {\r\n    margin-left: 0;\r\n  }\r\n}\r\n\r\n.item {\r\n  &--nav {\r\n    @include mixins.breakpoint(break-1) {\r\n      margin-left: .4rem;\r\n      display: inline-block;\r\n    }\r\n    &:first-of-type {\r\n      margin-left: 0;\r\n    }\r\n  }\r\n  &--current {\r\n    a {\r\n      color: settings.$captionColour;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// Links, icons and images\r\na .icon {\r\n  transition: fill .1s;\r\n  &:hover {\r\n    fill: currentColor;\r\n  }\r\n}\r\n\r\n.icon {\r\n  vertical-align: middle;\r\n  width: 1.1em;\r\n  height: 1.1em;\r\n  fill: CurrentColor;\r\n}\r\n\r\n// Media content\r\nimg {\r\n  max-width: 100%;\r\n  height: auto;\r\n}\r\n\r\n.figure {\r\n  line-height: 0;\r\n  &--left {\r\n    float: left;\r\n    padding-right: .8rem;\r\n  }\r\n  &--right {\r\n    float: right;\r\n    text-align: right;\r\n    padding-left: .8rem;\r\n  }\r\n  &--center {\r\n    text-align: center;\r\n    clear: both;\r\n  }\r\n}\r\n\r\n.video,\r\n.map {\r\n  position: relative;\r\n  padding-bottom: 56.25%;\r\n  height: 0;\r\n  iframe {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n}\r\n\r\n.map {\r\n  padding-bottom: 70%;\r\n}\r\n\r\n.figure,\r\n.video,\r\n.map,\r\n.form {\r\n  margin-bottom: .8rem;\r\n}\r\n\r\naudio,\r\nvideo {\r\n  width: 100%;\r\n}\r\n\r\n\r\n// Form elements and buttons\r\n.form {\r\n  position: relative;\r\n  &__legend {\r\n    font-style: italic;\r\n    color: settings.$captionColour;\r\n    position: absolute;\r\n    overflow: hidden;\r\n    right: 0;\r\n    clip: rect(0 0 0 0);\r\n  }\r\n}\r\n\r\nbutton,\r\n.button,\r\ninput[type=\"text\"],\r\ninput[type=\"email\"],\r\ninput[type=\"search\"],\r\ninput[type=\"submit\"],\r\ninput[type=\"color\"],\r\ntextarea,\r\nselect {\r\n  padding: .6rem 1.2rem;\r\n  margin-bottom: .6rem;\r\n  transition: color .1s, background-color .1s, border .1s;\r\n  line-height: inherit;\r\n  border: none;\r\n  box-shadow: none;\r\n  border-radius: 0;\r\n  -webkit-appearance: none;\r\n  .icon {\r\n    margin: 0 0 .35rem;\r\n  }\r\n}\r\n\r\ninput[type=\"submit\"],\r\nbutton,\r\n.button {\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  color: settings.$backgroundColour;\r\n  background: settings.$accentColour;\r\n  transition: box-shadow .1s;\r\n  will-change: box-shadow;\r\n  box-shadow: inset 0 0 0 2rem transparent;\r\n  &:hover {\r\n    box-shadow: inset 0 0 0 2rem rgba(0,0,0,0.25);\r\n  }\r\n  &:active,\r\n  &:focus {\r\n    box-shadow: inset 0 0 0 2rem rgba(0,0,0,0.25);\r\n  }\r\n}\r\n\r\n.button--nav {\r\n  background: none;\r\n  color: settings.$linkColour;\r\n  margin-bottom: 0;\r\n  min-height: 4rem;\r\n  min-width: 4rem;\r\n\r\n  @include mixins.breakpoint(break-1) {\r\n    display: none;\r\n  }\r\n  &:hover,\r\n  &:focus {\r\n    box-shadow: none;\r\n    color: settings.$hoverColour;\r\n  }\r\n}\r\n\r\na,\r\nbutton,\r\n.button,\r\ninput,\r\ntextarea,\r\nselect {\r\n  &:focus,\r\n  &:hover:focus {\r\n    outline: solid .12rem settings.$focusColour;\r\n    outline-offset: -.12rem;\r\n  }\r\n}\r\n\r\na:hover:focus {\r\n  outline: none;\r\n}\r\n\r\ninput[type=\"text\"],\r\ninput[type=\"email\"],\r\ninput[type=\"search\"],\r\ninput[type=\"color\"],\r\ntextarea,\r\nselect {\r\n  width: 100%;\r\n  border: 1px solid settings.$captionColour;\r\n  &:hover {\r\n    border-color: settings.$bodyColour;\r\n  }\r\n}\r\n\r\nselect {\r\n  background: settings.$codeBackgroundColour;\r\n}\r\n\r\ntextarea {\r\n    resize: vertical;\r\n}\r\n\r\nlabel {\r\n  @include mixins.baseline($fontsize: zeta, $font: settings.$bodytype, $lineheight: 2, $below: 2, $breakpoint: all);\r\n}\r\n\r\ncode {\r\n  padding: .12rem .2rem;\r\n  color: settings.$headingColour;\r\n}\r\n\r\npre code {\r\n  padding: 0;\r\n}\r\n\r\n.required {\r\n  color: red;\r\n}\r\n\r\n::-webkit-input-placeholder {\r\n  opacity: 0.5;\r\n}\r\n::-moz-placeholder {\r\n  opacity: 0.5;\r\n}\r\n:-ms-input-placeholder {\r\n  opacity: 0.5;\r\n}\r\n:-moz-placeholder {\r\n  opacity: 0.5;\r\n}\r\n\r\n::selection {\r\n  background: settings.$headingColour;\r\n  color: settings.$backgroundColour;\r\n  text-shadow: none;\r\n}\r\n\r\n\r\n// Sassline overrides\r\n.typeset {\r\n  a > code {\r\n    text-shadow: none;\r\n  }\r\n  .button,\r\n  button {\r\n    background-image: none;\r\n    text-shadow: none;\r\n    color: settings.$backgroundColour;\r\n    &:hover,\r\n    &:active,\r\n    &:focus {\r\n      background-image: none;\r\n      color: settings.$backgroundColour;\r\n    }\r\n  }\r\n  hr {\r\n    width: 100%;\r\n  }\r\n  li {\r\n    > p {\r\n      padding: 0;\r\n      margin: 0;\r\n    }\r\n  }\r\n  .nav a {\r\n    padding-left: 0;\r\n    padding-right: 0;\r\n    margin-left: .2rem;\r\n    margin-right: .2rem;\r\n  }\r\n  pre {\r\n    white-space: pre;\r\n    overflow-x: scroll;\r\n  }\r\n}\r\n","// Flexbox Mixins\r\n// http://philipwalton.github.io/solved-by-flexbox/\r\n// https://github.com/philipwalton/solved-by-flexbox\r\n// \r\n// Copyright (c) 2013 Brian Franco\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to\r\n// permit persons to whom the Software is furnished to do so, subject to\r\n// the following conditions:\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n//\r\n// This is a set of mixins for those who want to mess around with flexbox\r\n// using the native support of current browsers. For full support table\r\n// check: http://caniuse.com/flexbox\r\n//\r\n// Basically this will use:\r\n//\r\n// * Fallback, old syntax (IE10, mobile webkit browsers - no wrapping)\r\n// * Final standards syntax (FF, Safari, Chrome, IE11, Opera)\r\n//\r\n// This was inspired by:\r\n// \r\n// * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/\r\n// \r\n// With help from:\r\n// \r\n// * http://w3.org/tr/css3-flexbox/\r\n// * http://the-echoplex.net/flexyboxes/\r\n// * http://msdn.microsoft.com/en-us/library/ie/hh772069(v=vs.85).aspx\r\n// * http://css-tricks.com/using-flexbox/\r\n// * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/\r\n// * https://developer.mozilla.org/en-us/docs/web/guide/css/flexible_boxes\r\n\r\n//----------------------------------------------------------------------\r\n\r\n// Flexbox Containers\r\n//\r\n// The 'flex' value causes an element to generate a block-level flex\r\n// container box.\r\n//\r\n// The 'inline-flex' value causes an element to generate a inline-level\r\n// flex container box. \r\n//\r\n// display: flex | inline-flex\r\n//\r\n// http://w3.org/tr/css3-flexbox/#flex-containers\r\n//\r\n// (Placeholder selectors for each type, for those who rather @extend)\r\n\r\n// Deprecation of global built in funcitons necessitates import.\r\n@use \"sass:meta\";\r\n@use \"sass:list\";\r\n\r\n@mixin flexbox {\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -moz-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n}\r\n\r\n%flexbox { @include flexbox; }\r\n\r\n//----------------------------------\r\n\r\n@mixin inline-flex {\r\n  display: -webkit-inline-box;\r\n  display: -webkit-inline-flex;\r\n  display: -moz-inline-flex;\r\n  display: -ms-inline-flexbox;\r\n  display: inline-flex;\r\n}\r\n\r\n%inline-flex { @include inline-flex; }\r\n\r\n//----------------------------------------------------------------------\r\n\r\n// Flexbox Direction\r\n//\r\n// The 'flex-direction' property specifies how flex items are placed in\r\n// the flex container, by setting the direction of the flex container's\r\n// main axis. This determines the direction that flex items are laid out in. \r\n//\r\n// Values: row | row-reverse | column | column-reverse\r\n// Default: row\r\n//\r\n// http://w3.org/tr/css3-flexbox/#flex-direction-property\r\n\r\n@mixin flex-direction($value: row) {\r\n  @if $value == row-reverse {\r\n    -webkit-box-direction: reverse;\r\n    -webkit-box-orient: horizontal;\r\n  } @else if $value == column {\r\n    -webkit-box-direction: normal;\r\n    -webkit-box-orient: vertical;\r\n  } @else if $value == column-reverse {\r\n    -webkit-box-direction: reverse;\r\n    -webkit-box-orient: vertical;\r\n  } @else {\r\n    -webkit-box-direction: normal;\r\n    -webkit-box-orient: horizontal;\r\n  }\r\n  -webkit-flex-direction: $value;\r\n  -moz-flex-direction: $value;\r\n  -ms-flex-direction: $value;\r\n  flex-direction: $value;\r\n}\r\n  // Shorter version:\r\n  @mixin flex-dir($args...) { @include flex-direction($args...); }\r\n\r\n//----------------------------------------------------------------------\r\n\r\n// Flexbox Wrap\r\n//\r\n// The 'flex-wrap' property controls whether the flex container is single-line\r\n// or multi-line, and the direction of the cross-axis, which determines\r\n// the direction new lines are stacked in. \r\n//\r\n// Values: nowrap | wrap | wrap-reverse\r\n// Default: nowrap\r\n//\r\n// http://w3.org/tr/css3-flexbox/#flex-wrap-property\r\n\r\n@mixin flex-wrap($value: nowrap) {\r\n  // No Webkit Box fallback.\r\n  -webkit-flex-wrap: $value;\r\n  -moz-flex-wrap: $value;\r\n  @if $value == nowrap {\r\n    -ms-flex-wrap: none;\r\n  } @else { \r\n    -ms-flex-wrap: $value; \r\n  }\r\n  flex-wrap: $value;\r\n}\r\n\r\n//----------------------------------------------------------------------\r\n\r\n// Flexbox Flow (shorthand)\r\n//\r\n// The 'flex-flow' property is a shorthand for setting the 'flex-direction'\r\n// and 'flex-wrap' properties, which together define the flex container's\r\n// main and cross axes.\r\n//\r\n// Values: <flex-direction> | <flex-wrap> \r\n// Default: row nowrap\r\n//\r\n// http://w3.org/tr/css3-flexbox/#flex-flow-property\r\n\r\n@mixin flex-flow($values: (row nowrap)) {\r\n  // No Webkit Box fallback.\r\n  -webkit-flex-flow: $values;\r\n  -moz-flex-flow: $values;\r\n  -ms-flex-flow: $values;\r\n  flex-flow: $values;\r\n}\r\n\r\n//----------------------------------------------------------------------\r\n\r\n// Flexbox Order\r\n//\r\n// The 'order' property controls the order in which flex items appear within\r\n// their flex container, by assigning them to ordinal groups.\r\n//\r\n// Default: 0\r\n//\r\n// http://w3.org/tr/css3-flexbox/#order-property\r\n\r\n@mixin order($int: 0) {\r\n  -webkit-box-ordinal-group: $int + 1;\r\n  -webkit-order: $int;\r\n  -moz-order: $int;\r\n  -ms-flex-order: $int;\r\n  order: $int;\r\n}\r\n\r\n//----------------------------------------------------------------------\r\n\r\n// Flexbox Grow\r\n//\r\n// The 'flex-grow' property sets the flex grow factor. Negative numbers\r\n// are invalid.\r\n//\r\n// Default: 0\r\n//\r\n// http://w3.org/tr/css3-flexbox/#flex-grow-property\r\n\r\n@mixin flex-grow($int: 0) {\r\n  -webkit-box-flex: $int;\r\n  -webkit-flex-grow: $int;\r\n  -moz-flex-grow: $int;\r\n  -ms-flex-positive: $int;\r\n  flex-grow: $int;\r\n}\r\n\r\n//----------------------------------------------------------------------\r\n\r\n// Flexbox Shrink\r\n//\r\n// The 'flex-shrink' property sets the flex shrink factor. Negative numbers\r\n// are invalid.\r\n//\r\n// Default: 1\r\n//\r\n// http://w3.org/tr/css3-flexbox/#flex-shrink-property\r\n\r\n@mixin flex-shrink($int: 1) {\r\n  -webkit-flex-shrink: $int;\r\n  -moz-flex-shrink: $int;\r\n  -ms-flex-negative: $int;\r\n  flex-shrink: $int;\r\n}\r\n\r\n//----------------------------------------------------------------------\r\n\r\n// Flexbox Basis\r\n//\r\n// The 'flex-basis' property sets the flex basis. Negative lengths are invalid. \r\n//\r\n// Values: Like \"width\" \r\n// Default: auto\r\n//\r\n// http://www.w3.org/TR/css3-flexbox/#flex-basis-property\r\n\r\n@mixin flex-basis($value: auto) {\r\n  -webkit-flex-basis: $value;\r\n  -moz-flex-basis: $value;\r\n  -ms-flex-preferred-size: $value;\r\n  flex-basis: $value;\r\n}\r\n\r\n//----------------------------------------------------------------------\r\n\r\n// Flexbox \"Flex\" (shorthand)\r\n//\r\n// The 'flex' property specifies the components of a flexible length: the\r\n// flex grow factor and flex shrink factor, and the flex basis. When an\r\n// element is a flex item, 'flex' is consulted instead of the main size\r\n// property to determine the main size of the element. If an element is\r\n// not a flex item, 'flex' has no effect.\r\n//\r\n// Values: none | <flex-grow> <flex-shrink> || <flex-basis>\r\n// Default: See individual properties (1 1 0).\r\n//\r\n// http://w3.org/tr/css3-flexbox/#flex-property\r\n\r\n@mixin flex($fg: 1, $fs: null, $fb: null) {\r\n    \r\n  // Set a variable to be used by box-flex properties\r\n  $fg-boxflex: $fg;\r\n\r\n  // Box-Flex only supports a flex-grow value so let's grab the\r\n  // first item in the list and just return that.\r\n  @if meta.type-of($fg) == 'list' {\r\n    $fg-boxflex: list.nth($fg, 1);\r\n  }\r\n\r\n  -webkit-box-flex: $fg-boxflex;\r\n  -webkit-flex: $fg $fs $fb;\r\n  -moz-box-flex: $fg-boxflex;\r\n  -moz-flex: $fg $fs $fb;\r\n  -ms-flex: $fg $fs $fb;\r\n  flex: $fg $fs $fb;\r\n}\r\n\r\n//----------------------------------------------------------------------\r\n\r\n// Flexbox Justify Content\r\n//\r\n// The 'justify-content' property aligns flex items along the main axis\r\n// of the current line of the flex container. This is done after any flexible\r\n// lengths and any auto margins have been resolved. Typically it helps distribute\r\n// extra free space leftover when either all the flex items on a line are\r\n// inflexible, or are flexible but have reached their maximum size. It also\r\n// exerts some control over the alignment of items when they overflow the line.\r\n//\r\n// Note: 'space-*' values not supported in older syntaxes.\r\n//\r\n// Values: flex-start | flex-end | center | space-between | space-around\r\n// Default: flex-start\r\n//\r\n// http://w3.org/tr/css3-flexbox/#justify-content-property\r\n\r\n@mixin justify-content($value: flex-start) {\r\n  @if $value == flex-start {\r\n    -webkit-box-pack: start;\r\n    -ms-flex-pack: start;\r\n  } @else if $value == flex-end {\r\n    -webkit-box-pack: end;\r\n    -ms-flex-pack: end;\r\n  } @else if $value == space-between {\r\n    -webkit-box-pack: justify;\r\n    -ms-flex-pack: justify;\r\n  } @else if $value == space-around {\r\n    -ms-flex-pack: distribute;    \r\n  } @else {\r\n    -webkit-box-pack: $value;\r\n    -ms-flex-pack: $value;\r\n  }\r\n  -webkit-justify-content: $value;\r\n  -moz-justify-content: $value;\r\n  justify-content: $value;\r\n}\r\n  // Shorter version:\r\n  @mixin flex-just($args...) { @include justify-content($args...); }\r\n\r\n//----------------------------------------------------------------------\r\n\r\n// Flexbox Align Items\r\n//\r\n// Flex items can be aligned in the cross axis of the current line of the\r\n// flex container, similar to 'justify-content' but in the perpendicular\r\n// direction. 'align-items' sets the default alignment for all of the flex\r\n// container's items, including anonymous flex items. 'align-self' allows\r\n// this default alignment to be overridden for individual flex items. (For\r\n// anonymous flex items, 'align-self' always matches the value of 'align-items'\r\n// on their associated flex container.) \r\n//\r\n// Values: flex-start | flex-end | center | baseline | stretch\r\n// Default: stretch\r\n//\r\n// http://w3.org/tr/css3-flexbox/#align-items-property\r\n\r\n@mixin align-items($value: stretch) {\r\n  @if $value == flex-start {\r\n    -webkit-box-align: start;\r\n    -ms-flex-align: start;\r\n  } @else if $value == flex-end {\r\n    -webkit-box-align: end;\r\n    -ms-flex-align: end;\r\n  } @else {\r\n    -webkit-box-align: $value;\r\n    -ms-flex-align: $value;\r\n  }\r\n  -webkit-align-items: $value;\r\n  -moz-align-items: $value;\r\n  align-items: $value;\r\n}\r\n\r\n//----------------------------------\r\n\r\n// Flexbox Align Self\r\n//\r\n// Values: auto | flex-start | flex-end | center | baseline | stretch\r\n// Default: auto\r\n\r\n@mixin align-self($value: auto) {\r\n  // No Webkit Box Fallback.\r\n  -webkit-align-self: $value;\r\n  -moz-align-self: $value;\r\n  @if $value == flex-start {\r\n    -ms-flex-item-align: start;\r\n  } @else if $value == flex-end {\r\n    -ms-flex-item-align: end;\r\n  } @else {\r\n    -ms-flex-item-align: $value;\r\n  }\r\n  align-self: $value;\r\n}\r\n\r\n//----------------------------------------------------------------------\r\n\r\n// Flexbox Align Content\r\n//\r\n// The 'align-content' property aligns a flex container's lines within the\r\n// flex container when there is extra space in the cross-axis, similar to\r\n// how 'justify-content' aligns individual items within the main-axis. Note,\r\n// this property has no effect when the flexbox has only a single line.\r\n//\r\n// Values: flex-start | flex-end | center | space-between | space-around | stretch\r\n// Default: stretch\r\n//\r\n// http://w3.org/tr/css3-flexbox/#align-content-property\r\n\r\n@mixin align-content($value: stretch) {\r\n  // No Webkit Box Fallback.\r\n  -webkit-align-content: $value;\r\n  -moz-align-content: $value;\r\n  @if $value == flex-start {\r\n    -ms-flex-line-pack: start;\r\n  } @else if $value == flex-end {\r\n    -ms-flex-line-pack: end;\r\n  } @else {\r\n    -ms-flex-line-pack: $value;\r\n  }\r\n  align-content: $value;\r\n}\r\n","@use \"alembic\";\n\n// Bump up base font size on mobile for better readability\n@media (max-width: 600px) {\n    html {\n      font-size: 110%;\n    }\n}\n"],"file":"styles.css"}